const { EmbedBuilder } = require("discord.js");
const getMessage = require("../../utils/getMessage");

module.exports = {
    name: "price",
    category: "vendor",
    permissions: ["SendMessages"],
    usage: "Price [deco] [compte] [exchange] [boostserver]",
    examples: ["price", "price compte", "price deco", "price boostserver"],
    description: "Envoie les informations de prix de Lantium",
    async run(client, message, args) {
        message.delete();

        // DÃ©claration des informations de prix

        const prixNB = {
            "Nitro Boost TC": "3â‚¬"
        };

        const prixCompte = {
            "Informations": "Les comptes sont en Full Access avec OG Mail",
            "2015": "60â‚¬",
            "2016": "7â‚¬",
            "2017": "4â‚¬",
            "2018": "2.50â‚¬",
            "2019": "1.50â‚¬",
            "2020": "1â‚¬"
        };

        const prixDeco = {
            "4.99â‚¬": "2.90â‚¬",
            "5.99â‚¬": "3.80â‚¬",
            "6.99â‚¬": "4.10â‚¬",
            "7.99â‚¬": "5.10â‚¬",
            "8.49â‚¬": "5.60â‚¬",
            "9.99â‚¬": "6.60â‚¬",
            "11.99â‚¬": "7.30â‚¬"
        };

        const prixExchange = {
            "Paypal or CB to Crypto": {
                "-10â‚¬": "8% frais",
                "-20â‚¬": "6% frais",
                "+20â‚¬": "5% frais",
                "+50â‚¬": "4% frais"
            },
            "Crypto to Crypto": {
                "-10â‚¬": "8% frais",
                "-20â‚¬": "6% frais",
                "+20â‚¬": "5% frais",
                "+50â‚¬": "4% frais"
            },
            "Crypto to Paypal": "No Frais | Pourboires apprÃ©ciÃ© ðŸ˜‡",
            "Paysafecard to Paypal": "8% de frais",
            "Paysafecard to Crypto": "9% de frais"
        };

        // Modification de l'objet boostServer pour inclure les prix pour 1 mois et 3 mois
        const boostServer = {
            "x14": { "1 mois": "3.50â‚¬", "3 mois": "10.50" }
        };

        // CrÃ©ation de l'embed avec plus de lisibilitÃ©
        const embed = new EmbedBuilder()
            .setColor("#00b0f4")  // Couleur de l'embed
            .setTitle("ðŸ’° **Prix** ðŸ’°")
            .setDescription("Voici les informations des prix disponibles !")
            .setFooter({ text: getMessage("ShopFooter", "fr") })
            .setTimestamp();

        // Si aucun argument n'est donnÃ©, afficher tout
        if (args.length === 0) {
            embed.addFields(
                { name: "ðŸ’» **Comptes**", value: Object.entries(prixCompte).map(([key, value]) => `**${key}:** ${value}`).join("\n"), inline: false },
                { name: "ðŸŽ¨ **DÃ©coration**", value: Object.entries(prixDeco).map(([key, value]) => `**${key}:** ${value}`).join("\n"), inline: false },
                { name: "ðŸ”„ **Exchange Frais**", value: `**Paypal to Crypto ou Crypto vers Crypto**\n${Object.entries(prixExchange["Paypal or CB to Crypto"]).map(([key, value]) => `**${key}:** ${value}`).join("\n")}\n\n**Crypto > Paypal**\n${prixExchange["Crypto to Paypal"]}\n\n**Paysafecard > Paypal**\n${prixExchange["Paysafecard to Paypal"]}\n\n**Paysafecard > Crypto**\n${prixExchange["Paysafecard to Crypto"]}`, inline: false }
            );
        } else {
            // Cas avec un argument
            const argument = args[0].toLowerCase();
            if (argument === "compte") {
                embed.addFields(
                    { name: "ðŸ’» **Comptes**", value: Object.entries(prixCompte).map(([key, value]) => `**${key}:** ${value}`).join("\n"), inline: false }
                );
            } else if (argument === "nb") {
                embed.addFields(
                    { name: "ðŸŽ‰ **Nitro Boost**", value: Object.entries(prixNB).map(([key, value]) => `**${key}:** ${value}`).join("\n"), inline: false }
                );
            } else if (argument === "deco") {
                embed.addFields(
                    { name: "ðŸŽ¨ **DÃ©coration**", value: Object.entries(prixDeco).map(([key, value]) => `**${key}:** ${value}`).join("\n"), inline: false }
                );
            } else if (argument === "exchange") {
                embed.addFields(
                    { name: "ðŸ”„ **Exchange Frais**", value: `**Paypal to Crypto ou Crypto vers Crypto**\n${Object.entries(prixExchange["Paypal or CB to Crypto"]).map(([key, value]) => `**${key}:** ${value}`).join("\n")}\n\n**Crypto > Paypal**\n${prixExchange["Crypto to Paypal"]}\n\n**Paysafecard > Paypal**\n${prixExchange["Paysafecard to Paypal"]}\n\n**Paysafecard > Crypto**\n${prixExchange["Paysafecard to Crypto"]}`, inline: false }
                );
            } else if (argument === "boostserver") {
                // Afficher les prix pour 1 mois et 3 mois
                const boostInfo = Object.entries(boostServer)
                    .map(([key, value]) => `**${key} Boost**\n- 1 mois: ${value["1 mois"]}\n- 3 mois: ${value["3 mois"]}`)
                    .join("\n\n");
                embed.addFields(
                    { name: "ðŸ”¥ **Boost Serveur**", value: boostInfo, inline: false }
                );
            } else {
                embed.setDescription("Argument inconnu. Utilise `nb`, `compte`, `deco`, `exchange` ou `boostserver`.");
            }
        }

        // Envoie de l'embed
        message.channel.send({ embeds: [embed] });
    },
};
